'''
    This file is part of Prolothar-Process-Discovery (More Info: https://github.com/shs-it/prolothar-process-discovery).

    Prolothar-Process-Discovery is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Prolothar-Process-Discovery is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Prolothar-Process-Discovery. If not, see <https://www.gnu.org/licenses/>.
'''

from prolothar_common.models.eventlog import EventLog
from prolothar_process_discovery.discovery.proseqo.pattern_dfg import PatternDfg
from prolothar_process_discovery.discovery.proseqo.dfg_abstraction.candidates.candidates import Candidate
from prolothar_process_discovery.discovery.proseqo.dfg_abstraction.candidates.generator.pattern_candidate_generator import PatternCandidateGenerator
from prolothar_process_discovery.discovery.proseqo.pattern.pattern import Pattern
from prolothar_process_discovery.discovery.proseqo.pattern.parallel import Parallel
from prolothar_process_discovery.discovery.proseqo.pattern.sequence import Sequence

from typing import Iterable

class ParallelToSequenceGenerator(PatternCandidateGenerator):
    """generates candidates that turns parallel patterns into sequences.
    The idea is that the parallel behavior might be picked up because of
    noise and a sequence would still be able to achieve a lower score, but
    was not generated as candidate yet because of the noisy edges.
    assumption: noise generated by swap operations
    """

    def __init__(self, keep_degeneration: bool = False,
                 consider_subpatterns: bool = False):
        super().__init__(keep_degeneration=keep_degeneration)

    def _generate_patterns(
            self, log: EventLog, dfg: PatternDfg,
            pattern_dfg: PatternDfg) -> Iterable[Candidate]:
        candidates = []

        for node in pattern_dfg.get_nodes():
            candidates.extend(self.__generate_candidates_from_pattern(
                    node.pattern))

        return candidates

    def __generate_candidates_from_pattern(
            self, pattern: Pattern):
        if pattern.get_nr_of_subpatterns() == 2 \
            and isinstance(pattern, Parallel):
                subpatterns = pattern.get_subpatterns()
                yield Sequence([subpatterns[0], subpatterns[1]])
                yield Sequence([subpatterns[1], subpatterns[0]])
        for subpattern in pattern.get_subpatterns():
            for new_subpattern in self.__generate_candidates_from_pattern(
                    subpattern):
                new_pattern = pattern.copy()
                new_pattern.replace_direct_subpattern(subpattern, new_subpattern)
                yield new_pattern
